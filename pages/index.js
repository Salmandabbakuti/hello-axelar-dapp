import { useState } from "react";
import { ConnectButton, useAddRecentTransaction } from "@rainbow-me/rainbowkit";
import {
  useAccount,
  useSigner,
  useContract,
  useContractRead,
  useContractEvent,
  useNetwork
} from "wagmi";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import "@rainbow-me/rainbowkit/styles.css";
import chains from "../chains.json";

const abi = [
  "event MessageChanged(string message, string sourceChain, address caller)",
  "function message() view returns (string)",
  "function setGreeting(string destinationChain, string destinationAddress, string _message) payable",
  "function sourceChain() view returns (string)"
];
const moonbeamContractAddress = chains[0].greeterAddress;
const avalancheContractAddress = chains[1].greeterAddress;

export default function Home() {
  const [logMessage, setLogMessage] = useState("");
  const [avalancheGreeting, setAvalancheGreeting] = useState("");
  const [moonbeamGreeting, setMoonbeamGreeting] = useState("");
  const [messageToAvalancheInput, setMessageToAvalancheInput] = useState("");
  const [messageToMoonbeamInput, setMessageToMoonbeamInput] = useState("");
  const [txHash, setTxHash] = useState("");

  const { address } = useAccount();
  const { data: signer } = useSigner();
  const { chain } = useNetwork();
  const addRecentTransaction = useAddRecentTransaction();

  useContractRead({
    address: moonbeamContractAddress,
    abi,
    functionName: "message",
    args: [], // contract function inputs
    watch: true,
    chainId: 1287, // optional, defaults to current chain
    onSuccess: (result) => setMoonbeamGreeting(result),
    onError: (error) => console.log("Moonbeam Contract read error:", error)
  });

  useContractRead({
    address: avalancheContractAddress,
    abi,
    functionName: "message",
    args: [], // contract function inputs
    watch: true,
    chainId: 43113, // optional, defaults to current chain
    onSuccess: (result) => setAvalancheGreeting(result),
    onError: (error) => console.log("Avalanche Contract read error:", error)
  });

  // listen to contract events
  useContractEvent({
    address: moonbeamContractAddress,
    abi,
    eventName: "MessageChanged",
    chainId: 1287, // optional, defaults to current chain
    listener: (...eventData) =>
      setLogMessage(
        `${new Date().toLocaleString(
          "en-IN"
        )}: Event triggered on Moonbeam: Message: ${eventData[0]
        }, SourceChain: ${eventData[1]}, Caller: ${eventData[2]}`
      )
  });

  useContractEvent({
    address: avalancheContractAddress,
    abi,
    eventName: "MessageChanged",
    chainId: 43113, // optional, defaults to current chain
    listener: (...eventData) =>
      setLogMessage(
        `${new Date().toLocaleString(
          "en-IN"
        )}: Event triggered on Avalanche: SourceChain: Message: ${eventData[0]
        },${eventData[1]}, Caller: ${eventData[2]}`
      )
  });

  const avalancheContract = useContract({
    address: avalancheContractAddress,
    abi,
    signerOrProvider: signer
  });

  const moonbeamContract = useContract({
    address: moonbeamContractAddress,
    abi,
    signerOrProvider: signer
  });

  const handleAvalancheSetGreeting = async () => {
    try {
      if (chain.id !== 43113) return alert("Switch to Avalanche C-Chain");
      const tx = await avalancheContract.setGreeting(
        "Moonbeam",
        moonbeamContractAddress,
        messageToMoonbeamInput,
        {
          value: BigInt(3e17),
          gasLimit: 3e6
        }
      );
      setTxHash(tx.hash);
      addRecentTransaction({
        hash: tx.hash,
        description: "setGreeting: Avalanche -> Moonbeam",
        confirmations: 1
      });
      await tx.wait();
    } catch (error) {
      console.error("error in setGreeting:avalanche --> moonbeam", error);
    }
  };

  const handleMoonbeamSetGreeting = async () => {
    try {
      if (chain.id !== 1287) return alert("Switch to Moonbeam Alpha Testnet");
      const tx = await moonbeamContract.setGreeting(
        "Avalanche",
        avalancheContractAddress,
        messageToAvalancheInput,
        {
          value: BigInt(3e17),
          gasLimit: 3e6
        }
      );
      setTxHash(tx.hash);
      addRecentTransaction({
        hash: tx.hash,
        description: "setGreeting: Moonbeam --> Avalanche",
        confirmations: 1
      });
      await tx.wait();
    } catch (error) {
      console.error("error in setGreeting:moonbeam --> avalanche ", error);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Axelar X Dapp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ConnectButton
          label="Connect Wallet" // button label
          accountStatus={{
            smallScreen: "avatar",
            largeScreen: "full"
          }} // or avatar, address, none
          chainStatus={{
            smallScreen: "icon",
            largeScreen: "full"
          }} //or icon, name, none
          showBalance={{
            smallScreen: false,
            largeScreen: true
          }} // or false
        />
        {address && (
          <div className={styles.grid}>
            {/* card with image and input box with submit loading */}
            <div className={styles.card}>
              <h2>Moonbeam</h2>
              <img src="/assets/moonbeam.png" alt="moonbeam-banner" />
              <p>{moonbeamGreeting}</p>
              <input
                type="text"
                className={styles.input}
                placeholder="Enter your message"
                value={messageToAvalancheInput}
                onChange={(e) => setMessageToAvalancheInput(e.target.value)}
              />
              <button
                className={styles.button}
                onClick={handleMoonbeamSetGreeting}
              >
                Send
              </button>
            </div>

            <div className={styles.card}>
              <h2>Avalanche</h2>
              <img src="/assets/avalanche.jpg" alt="avalanche-banner" />
              <p>{avalancheGreeting}</p>
              <input
                className={styles.input}
                type="text"
                placeholder="Enter your message"
                value={messageToMoonbeamInput}
                onChange={(e) => setMessageToMoonbeamInput(e.target.value)}
              />
              <button
                className={styles.button}
                onClick={handleAvalancheSetGreeting}
              >
                Send
              </button>
            </div>
          </div>
        )}
        {txHash && (
          <a
            href={`https://testnet.axelarscan.io/gmp/${txHash}`}
            target="_blank"
            rel="noopener noreferrer"
          >
            Tx hash: {txHash.slice(0, 10) + "..." + txHash.slice(-10)}
          </a>
        )}
        <p className={styles.description}>{logMessage}</p>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://github.com/Salmandabbakuti"
          target="_blank"
          rel="noopener noreferrer"
        >
          Â© 2022 Salman Dabbakuti. Built with Axelar
        </a>
      </footer>
    </div>
  );
}
